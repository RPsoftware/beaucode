from cip.cip.framework.connections.spark import spark
from cip.cip.framework.files.read import cnt
import pyspark.sql.functions as F
from pyspark.sql.window import *

class customerBasket:
    def __init__(self):
        """
        Assigning Variable from config file
        """
        # Target Table
        self.target_db = cnt["Customer_Staging_Mart"]["cdd_odl_database"]["information_database"]
        #self.target_table = cnt["Customer_Staging_Mart"]["cdd_odl_tables"]["cdd_odl_customer_basket"]
        self.target_table = 'cdd_odl_redesign_customer_basket'

        # Source Databases
        self.secure_db = cnt["Customer_Staging_Mart"]["csm_database"]["secured_landing_database"] ##SECURE DB reference!!
        self.information_db = cnt["Customer_Staging_Mart"]["cdd_odl_database"]["information_database"]

        # Src Tables
        #self.uct = cnt["Customer_Staging_Mart"]["csm_tables"]["cdd_raw_unified_customer_table"]
        self.uct = 'cdd_raw_unified_customer_table'
        #self.trans_ids = cnt["Customer_Staging_Mart"] ["cdd_odl_tables"] ["cdd_odl_transaction_ids"]
        self.trans_ids = 'cdd_odl_transaction_ids'

    def run(self):

        # Ingest data from hive tables and store as df for later transformation and joins
        uct_df = spark.sql("SELECT source_system_id, source, version_date, customerid \
                                                                        FROM {}.{} WHERE source = 'sp' OR source = 'store'".format(self.secure_db,self.uct))

        ti_df = spark.sql("SELECT basket_id, store_nbr, visit_dt, visit_nbr, channel_id, ghs_order_id, sng_cart_id, lead_xref, singl_profl_id \
                                                        FROM {}.{} WHERE non_scan_visit_ind = '0' AND (lead_xref IS NOT NULL OR singl_profl_id IS NOT NULL)".format(self.information_db, self.trans_ids))

        ti_df.repartition('visit_dt')

        # Get latest version of customerid
        latest_version = uct_df.agg(F.max('version_date')).collect()[0][0]
        uct_df = uct_df.where(uct_df.version_date == latest_version).distinct()

        # split uct_df into source = 'sp' and source = 'store'
        uct_sp_df = uct_df.filter(F.col('source') == ('sp'))
        uct_sp_df = uct_sp_df.select(F.col('source_system_id').alias('sp_source_system_id'), F.col('customerid').alias('sp_customerid'))
        uct_store_df = uct_df.filter(F.col('source') == ('store'))
        uct_store_df = uct_store_df.select(F.col('source_system_id').alias('store_source_system_id'), F.col('customerid').alias('store_customerid'))

        # call functions
        cid_1_df = self.getCust1(ti_df, uct_store_df) # join trans_ids to uct on lead_xref for source=store
        cid_123_df = self.getCust2_3(cid_1_df, uct_sp_df) # join results from above to uct again but using singl profil id and source=sp
        cb_df = self.getCustomerBasket(cid_123_df) # add new column 'unified_customer_id'

        # write to table
        spark.conf.set("spark.sql.shuffle.partitions", 500)
        cb_df.write.mode("overwrite").partitionBy('visit_dt').saveAsTable("{}.{}".format(self.target_db, self.target_table))

    ### FUNCTIONS ###

    @staticmethod
    def getCust1 (ti_df, uct_store_df):

        cid_1_df = ti_df1.join(uct_store_df, on=[(ti_df.lead_xref == uct_store_df.store_source_system_id)], how = 'LEFT')
        cid_1_df = cid_1_df.select('basket_id', 'store_nbr','visit_dt','visit_nbr','channel_id','ghs_order_id', 'sng_cart_id','singl_profl_id', 'store_customerid').drop(cid_1_df.store_source_system_id)
        return (cid_1_df)

    @staticmethod
    def getCust2_3 (cid_1_df, uct_sp_df):
        
        cid_23_df = cid_1_df.join(uct_sp_df, on=[(cid_1_df.singl_profl_id == uct_sp_df.sp_source_system_id)], how='LEFT')
        cid_123_df = cid_23_df.select('basket_id', 'store_nbr','visit_dt','visit_nbr','channel_id','ghs_order_id', 'sng_cart_id', 'store_customerid', 'sp_customerid').drop(cid_23_df.sp_source_system_id)
        return(cid_123_df)

    @staticmethod
    def getCustomerBasket (cid_123_df):

        cid_list = [2,3]

        cb_df = cid_123_df.withColumn('unified_customer_id', F.when(F.col('channel_id').isin(cid_list), cid_123_df.sp_customerid).when(F.col('channel_id') == 1, cid_123_df.store_customerid).otherwise(None))
        cb_df = cb_df.select('unified_customer_id', 'basket_id', 'store_nbr','visit_dt','visit_nbr','channel_id','ghs_order_id', 'sng_cart_id')
        return (cb_df)

ts = customerBasket()
ts.run()

