from cip.cip.framework.connections.spark import spark
from cip.cip.framework.files.read import cnt
from datetime import datetime, timedelta
import pyspark.sql.functions as F
from pyspark.sql.types import  DecimalType, StringType, TimestampType
from pyspark.sql.window import *

class transID:
    def __init__(self):
        """
        Assigning Variable from config file
        """
        # Target Table
        self.target_db = cnt["Customer_Staging_Mart"]["cdd_odl_database"]["information_database"]
        #self.target_table = cnt["Customer_Staging_Mart"]["cdd_odl_tables"]["cdd_odl_transaction_ids"]
        self.target_table = 'cdd_odl_transaction_ids'

        # Source Databases
        self.staging_db = cnt["Customer_Staging_Mart"]["csm_database"]["landing_database"]
        self.information_db = cnt["Customer_Staging_Mart"]["cdd_odl_database"]["information_database"]

        # Src Tables
        #self.store_visit = cnt["Customer_Staging_Mart"]["csm_tables"]["cdd_raw_store_visit"]
        self.store_visit = 'cdd_raw_store_visit'
        #self.store_trans = cnt["Customer_Staging_Mart"] ["csm_tables"] ["cdd_raw_store_transaction"]
        self.store_trans = 'cdd_raw_store_transaction'
        #self.store_tender = cnt["Customer_Staging_Mart"] ["csm_tables"] ["cdd_raw_store_visit_tender"]
        self.store_tender = 'cdd_raw_store_visit_tender'
        #self.eic = cnt["Customer_Staging_Mart"] ["csm_tables"] ["cdd_raw_eic_order_details"]
        self.eic = 'cdd_raw_eic_order_details'
        #self.ghs = cnt["Customer_Staging_Mart"] ["csm_tables"] ["cdd_raw_ghs_order"]
        self.ghs = 'cdd_raw_ghs_order'
        #self.sng = cnt["Customer_Staging_Mart"] ["csm_tables"] ["cdd_raw_sng_visit"]
        self.sng = 'cdd_raw_sng_visit'
        #self.sng_matching = cnt["Customer_Staging_Mart"] ["cdd_odl_tables"] ["cdd_odl_sng_matching"]
        self.sng_matching = 'cdd_odl_sng_matching'

    def run(self):
	
	# Ingest data from hive tables and store as df for later transformation and joins

        sv_df = spark.sql("SELECT visit_dt, visit_nbr, store_nbr, visit_ts, trans_nbr, reg_nbr, visit_subtype_cd \
									FROM {}.{}".format(self.staging_db,self.store_visit))
        sv_df.repartition('visit_dt')

        s_trns_df = spark.sql("SELECT visit_date, visit_nbr, store_nbr, tc_nbr FROM {}.{}".format(self.staging_db,self.store_trans))
        s_trns_df.repartition('visit_date')

        s_tndr_df = spark.sql("SELECT store_nbr, visit_dt, visit_nbr, acct_nbr, tndr_amt, tndr_type_cd, debit_rq_tm, debit_rq_dt FROM \
								{}.{}".format(self.staging_db,self.store_tender))
        s_tndr_df.repartition('visit_dt')

        eic_df = spark.sql("SELECT order_id, tc_num FROM {}.{}".format(self.staging_db,self.eic))

        ghs_df = spark.sql("SELECT cust_id, web_order_id FROM {}.{}".format(self.staging_db,self.ghs))

        sng_df = spark.sql("SELECT cust_singl_profl_id, cart_id, trans_cd FROM {}.{}".format(self.staging_db,self.sng))

        sng_mtchng_df = spark.sql("SELECT store_nbr, visit_dt, visit_nbr, cart_id FROM {}.{}".format(self.information_db,self.sng_matching))
        sng_mtchng_df.repartition('visit_dt')
		
	    print("dataframes set")

    # add derived basket_id to store_visit, store_tender and sng_matching

        sv_df = sv_df.withColumn("basket_id", F.concat((F.col("visit_dt").cast(StringType())), (F.col("store_nbr")), (F.col("visit_nbr"))))
        sv_df = sv_df.withColumn("basket_id", F.regexp_replace('basket_id', '-', '').cast(DecimalType(38,0)))

        s_trns_df = s_trns_df.withColumn("basket_id", F.concat((F.col("visit_date").cast(StringType())), (F.col("store_nbr")), (F.col("visit_nbr"))))
        s_trns_df = s_trns_df.withColumn("basket_id", F.regexp_replace('basket_id', '-', '').cast(DecimalType(38,0)))

        sng_mtchng_df = sng_mtchng_df.withColumn("basket_id", F.concat((F.col("visit_dt").cast(StringType())), (F.col("store_nbr")), (F.col("visit_nbr"))))
        sng_mtchng_df = sng_mtchng_df.withColumn("basket_id", F.regexp_replace('basket_id', '-', '').cast(DecimalType(38,0)))


        s_tndr_df = self.getAcctNbr(s_tndr_df)
		trans_ids_df = self.CreateOutput(sv_df, s_trns_df, s_tndr_df, eic_df, ghs_df, sng_df, sng_mtchng_df) 
		final_df = self.FinalDF(trans_ids_df)
		
		final_df.write.partitionBy('visit_dt').mode("overwrite").saveAsTable("{}.{}".format(self.target_db, self.target_table))
		
		@staticmethod
		def getAcctNbr (s_tndr_df)
			s_tndr_df = s_tndr_df.filter(F.col('tndr_type_cd') == 8)

			# Windows function to get MAX(tndr_amt) when there is more than one transaction per visit
			s_tndr_df = s_tndr_df.withColumn("row_num", F.row_number().over(Window.partitionBy("visit_dt", "store_nbr", "visit_nbr").orderBy(F.desc("tndr_amt"))))
			s_tndr_df = s_tndr_df.filter(F.col('row_num') == 1).drop('row_num')

			# Convert the debit_rq_dt and debit_rq_tm to a timestamp to further filter for unique acct_nbr
			s_tndr_df = s_tndr_df.withColumn("datetime_dbrqtm", (F.concat((F.col("debit_rq_dt").cast(StringType())), F.lit(" "), F.substring(F.col("debit_rq_tm"),1,8)).cast(TimestampType())))

			#windows function to get row 1 when MIN(debit_rq_tm) then select fields required, should be unique to that account nbr.
			s_tndr_df = s_tndr_df.withColumn("row_num", F.row_number().over(Window.partitionBy("visit_dt", "store_nbr", "visit_nbr").orderBy(F.asc("datetime_dbrqtm"))))
			s_tndr_df = s_tndr_df.filter(F.col('row_num') == 1).drop('row_num')
			s_tndr_df = s_tndr_df.select('visit_dt', 'store_nbr', 'visit_nbr', 'acct_nbr')
			
			s_tndr_df.repartition('visit_dt')
			
			return (s_tndr_df)

        
		@staticmethod
		def CreateOutput (sv_df, s_trns_df, s_tndr_df, eic_df, ghs_df, sng_df, sng_mtchng_df)
		
        # Variables used for channel_id derivation
			reg_nbr = 82
			subtype_li = [89,152,201,202]
			def_channel_id = 1

        # Dates used for cart_id
			before_date = '2021-12-06'
			after_date = '2021-12-05'

			final_df = sv_df.join(s_trns_df, on=["basket_id"], how='INNER').drop(s_trns_df.basket_id).drop(s_trns_df.visit_nbr).drop(s_trns_df.store_nbr).drop(s_trns_df.visit_date)

			final_df = final_df.withColumn("channel_id", (F.when(F.col('reg_nbr') == reg_nbr, 2).when(F.col('visit_subtype_cd').isin(subtype_li), 3).otherwise(1)))

			final_df = final_df.join(s_tndr_df, on=["visit_dt", "store_nbr", "visit_nbr"], how='LEFT').drop(s_tndr_df.visit_dt).drop(s_tndr_df.store_nbr).drop(s_tndr_df.visit_nbr)

			final_df = final_df.join(eic_df, on=[(eic_df.tc_num == final_df.tc_nbr)], how='LEFT')

			final_df = final_df.join(ghs_df, on=[final_df.order_id == ghs_df.web_order_id], how='LEFT')

			final_df = final_df.join(sng_df, on=[final_df.tc_nbr == sng_df.trans_cd], how='LEFT')

			trans_ids_df = final_df.join(sng_mtchng_df, on=["basket_id"], how='LEFT')
			
			return (trans_ids_df)

        @staticmethod
		def FinalDF (trans_ids_df)
		
			final_df = final_df.select('basket_id', 'visit_dt', 'store_nbr', 'visit_nbr', 'visit_ts', 'trans_nbr', 'reg_nbr', 'visit_subtype_cd','channel_id', 'tc_nbr', \
			(F.col('acct_nbr').alias('lead_xref')), (F.col('order_id').alias('ghs_order_id')), \
			F.when(F.col("channel_id") == 2, cust_id).when(F.col("channel_id") == 3, cust_singl_profl_id).otherwise("NULL").alias('singl_profl_id'), \
			F.when(F.col("channel_id") == 3 & sv_df.visit_dt < before_date, sng_mtchng_df.cart_id).when(F.col("channel_id") == 3 & sv_df.visit_dt > after_date, sng_visit.cart_id).otherwise("NULL").alias("sng_cart_id"))
			final_df = final_df.distinct()
			final_df.repartition('visit_dt')
			return(final_df)

  final_df = trans_ids_df.select('basket_id', 'visit_dt', 'store_nbr', 'visit_nbr', 'visit_ts', 'trans_nbr', 'reg_nbr', 'visit_subtype_cd','channel_id', 'tc_nbr', \
        (F.col('acct_nbr').alias('lead_xref')), (F.col('order_id').alias('ghs_order_id')), \
        F.when(F.col('channel_id') == 2, cust_id).when(F.col('channel_id') == 3, cust_singl_profl_id).otherwise(None).alias('singl_profl_id'), \
        F.when(((F.col('channel_id') == 3) & (visit_dt < (before_date))), cart_id).when(((F.col('channel_id') == 3) & (visit_dt > (after_date))), \
        sng_df.cart_id).otherwise(None).alias('sng_cart_id'))
        final_df = final_df.distinct()
        final_df.repartition('visit_dt')

ts = transID()
ts.run()