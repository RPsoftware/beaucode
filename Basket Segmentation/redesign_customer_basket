from cip.cip.framework.connections.spark import spark
from cip.cip.framework.files.read import cnt
import pyspark.sql.functions as F
from pyspark.sql.window import *

class customerBasket:
    def __init__(self):
        """
        Assigning Variable from config file
        """
        # Target Table
        self.target_db = cnt["Customer_Staging_Mart"]["cdd_odl_database"]["information_database"]
        #self.target_table = cnt["Customer_Staging_Mart"]["cdd_odl_tables"]["cdd_odl_customer_basket"]
        self.target_table = 'cdd_odl_redesign_customer_basket'

        # Source Databases
        self.secure_db = cnt["Customer_Staging_Mart"]["csm_database"]["secured_landing_database"] ##SECURE DB reference!!
        self.information_db = cnt["Customer_Staging_Mart"]["cdd_odl_database"]["information_database"]

        # Src Tables
        #self.uct = cnt["Customer_Staging_Mart"]["csm_tables"]["cdd_raw_unified_customer_table"]
        self.uct = 'cdd_raw_unified_customer_table'
        #self.trans_ids = cnt["Customer_Staging_Mart"] ["cdd_odl_tables"] ["cdd_odl_transaction_ids"]
        self.trans_ids = 'cdd_odl_transaction_ids'


    def run(self):

        # Ingest data from hive tables and store as df for later transformation and joins
        uct_df = spark.sql("SELECT source_system_id, source, version, customerid \
                                                                        FROM {}.{}".format(self.secure_db,self.uct))

        ti_df = spark.sql("SELECT basket_id, store_nbr, visit_dt, visit_nbr, channel_id, ghs_order_id, sng_cart_id, lead_xref, singl_profl_id \
                                                        FROM {}.{}".format(self.information_db, self.trans_ids))

        # Get latest version of customerid
        uct_df = uct_df.withColumn("row_num", F.row_number().over(Window.partitionBy("customerid").orderBy(F.desc("version"))))
        uct_df = uct_df.filter(F.col('row_num') == 1).drop('row_num').drop('version')

        cid_1_df = self.getCust1(ti_df, uct_df) # join trans_ids to uct on lead_xref and sources

        cid_23_df = self.getCust2_3(ti_df, uct_df) # join results from above to uct again but using singl profil id and sources

        cb_df = self.getCustomerBasket(cid_1_df, cid_23_df)

        cb_df.write.mode("overwrite").saveAsTable("{}.{}".format(self.target_db, self.target_table))

    @staticmethod
    def getCust1 (ti_df, uct_df):

        ti_df = ti_df.filter(F.col('channel_id') == 1)
        uct_df = uct_df.filter(F.col('source') == ('store'))
        cid_1_df = ti_df.join(uct_df, on=[(ti_df.lead_xref == uct_df.source_system_id)], how = 'LEFT')
        cid_1_df = cid_1_df.withColumn('unified_customer_id', F.col('customerid'))

        return (cid_1_df)

    @staticmethod
    def getCust2_3 (ti_df, uct_df):

        c_id = [2,3]
        ti_df = ti_df.filter(F.col('channel_id').isin(c_id))
        uct_df = uct_df.filter(F.col('source') == ('sp'))
        cid_23_df = ti_df.join(uct_df, on=[(ti_df.singl_profl_id == uct_df.source_system_id)], how='LEFT')
        cid_23_df = cid_23_df.withColumn('unified_customer_id', F.col('customerid'))

        return(cid_23_df)

    @staticmethod
    def getCustomerBasket (cid_23_df, cid_1_df):

        cb_df = cid_1_df.union(cid_23_df)
        cb_df.distinct()
		cb_df = cb_df.select('unified_customer_id','basket_id', 'store_nbr','visit_dt','visit_nbr','channel_id','ghs_order_id', 'sng_cart_id')
        return (cb_df)


ts = customerBasket()
ts.run()
